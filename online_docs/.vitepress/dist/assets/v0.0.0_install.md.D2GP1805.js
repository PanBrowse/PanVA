import{_ as o,D as s,c as l,l as a,a as e,I as i,a4 as n,o as p}from"./chunks/framework.DonzCgw1.js";const P=JSON.parse('{"title":"Installation","description":"","frontmatter":{},"headers":[],"relativePath":"v0.0.0/install.md","filePath":"v0.0.0/install.md","lastUpdated":1713907597000}'),r={name:"v0.0.0/install.md"},h={id:"installation",tabindex:"-1"},c=a("a",{class:"header-anchor",href:"#installation","aria-label":'Permalink to "Installation <Badge type="info" text="v0.0.0" />"'},"​",-1),d=n('<p>This page contains instructions on how to get started with PanVA using your own data.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>In order to run the PanVA application you will need the following:</p><ul><li><a href="https://docs.docker.com" target="_blank" rel="noreferrer">Docker</a></li><li>A database that follows the <a href="./data-format.html">PanVA API Data Format</a></li><li><em>Optional:</em> A <a href="./config.html#example-configuration-file-example-config">frontend configuration file</a></li></ul>',4),u={id:"running-the-application-with-docker",tabindex:"-1"},g=a("a",{class:"header-anchor",href:"#running-the-application-with-docker","aria-label":'Permalink to "Running the application with Docker <Badge type="tip" text="recommended" />"'},"​",-1),m=n(`<p>Using the publically available Docker image, you can start the PanVA application from anywhere using the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run -p 8080:80 -v /path/to/your/data:/panva/api/data -v /path/to/your/config.json:/panva/frontend/config.json -e APACHE_UID=1000 -e APACHE_GID=1000 ghcr.io/panbrowse/panva:main</span></span></code></pre></div><p>The application will then be available on <a href="http://localhost:8080/" target="_blank" rel="noreferrer">http://localhost:8080/</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Ensure Docker is running and has access to data directories before running the command.</p></div><p>We&#39;ll explain the various options passed to Docker.</p><ul><li><code>-p 8080:80</code> <br> The image exposes port 80. This option maps that port to port 8080 on the host machine.</li><li><code>-v /path/to/your/data:/panva/api/data</code> <br> Mounts your custom data directory to the predefined path <code>/panva/api/data</code> that the application looks at. <br><strong>IMPORTANT:</strong> Make sure this directory is writable so the <a href="./api/docs/data-format.html#linkage_matrixnpy-auto-generated">linkage_matrix.npy</a> files can be stored in each homology group directory.</li><li><code>-v /path/to/your/config.json:/panva/frontend/config.json</code> <br> Mounts your custom <code>config.json</code> file to the predefined path <code>/panva/frontend/config.json</code> that the application looks at. The <code>apiUrl</code> option should be omitted in most cases.</li><li><code>-e APACHE_UID=1000</code> <br><code>-e APACHE_GID=1000</code> <br> The data directory mounted at <code>/panva/api/data</code> needs to be read by the Apache webserver. To prevent permission issues, the user id (uid) and group id (gid) of the user running Apache can be changed to match the data directory on the host machine. Use <code>ls -n</code> to see the numeric uid and gid of a directory on the host machine.</li></ul><h2 id="building-the-application" tabindex="-1">Building the application <a class="header-anchor" href="#building-the-application" aria-label="Permalink to &quot;Building the application&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>For most use cases, building a custom docker image is not needed</p></div><p>To run the application, you <strong>don&#39;t</strong> need to build the application yourself. In most cases <a href="#running-the-application-with-docker">running the application</a> via the public Docker image is what you&#39;re looking for.</p><p>You can, however, build a Docker image of the application yourself. From the root of this repository run the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker build -t panva .</span></span></code></pre></div><p>When running the application, instead of using the provided Docker image name you use the <code>panva</code> tag instead:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run [options] panva</span></span></code></pre></div><h2 id="development-installation" tabindex="-1">Development installation <a class="header-anchor" href="#development-installation" aria-label="Permalink to &quot;Development installation&quot;">​</a></h2><p>Running the application without Docker is possible. The PanVA source code can be found on <a href="https://github.com/PanBrowse/PanVA/tree/main" target="_blank" rel="noreferrer">GitHub</a>, containing Frontend and API code. Once you have cloned the repository, use the following commands to install the frontend and API:</p><h3 id="frontend" tabindex="-1">Frontend <a class="header-anchor" href="#frontend" aria-label="Permalink to &quot;Frontend&quot;">​</a></h3><p>We use <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer">nvm</a> to use a specific node version when developing.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci</span></span></code></pre></div><p>When nvm is installed correctly, the version defined in <a href="./.nvmrc.html"><code>.nvmrc</code></a> should be automatically loaded when a terminal is opened in the <code>frontend</code> directory. If not, you need to run <code>nvm use</code> before running <code>npm</code> commands.</p><h4 id="compile-and-hot-reload-for-development" tabindex="-1">Compile and Hot-Reload for Development <a class="header-anchor" href="#compile-and-hot-reload-for-development" aria-label="Permalink to &quot;Compile and Hot-Reload for Development&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><h4 id="type-check-compile-and-minify-for-production" tabindex="-1">Type-Check, Compile and Minify for Production <a class="header-anchor" href="#type-check-compile-and-minify-for-production" aria-label="Permalink to &quot;Type-Check, Compile and Minify for Production&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h4 id="lint-with-eslint" tabindex="-1">Lint with <a href="https://eslint.org/" target="_blank" rel="noreferrer">ESLint</a> <a class="header-anchor" href="#lint-with-eslint" aria-label="Permalink to &quot;Lint with [ESLint](https://eslint.org/)&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span></span></code></pre></div><h3 id="api-code" tabindex="-1">API code <a class="header-anchor" href="#api-code" aria-label="Permalink to &quot;API code&quot;">​</a></h3><h4 id="install-poetry" tabindex="-1">Install Poetry <a class="header-anchor" href="#install-poetry" aria-label="Permalink to &quot;Install Poetry&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -</span></span>
<span class="line"><span>poetry config virtualenvs.in-project true # For linters to work with VSCode</span></span></code></pre></div><h4 id="install-project-dependencies" tabindex="-1">Install project dependencies <a class="header-anchor" href="#install-project-dependencies" aria-label="Permalink to &quot;Install project dependencies&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>poetry install</span></span></code></pre></div><h4 id="run-the-application" tabindex="-1">Run the application <a class="header-anchor" href="#run-the-application" aria-label="Permalink to &quot;Run the application&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>poetry run python app.py</span></span></code></pre></div><p>The application will then be available on <a href="http://localhost:5001/" target="_blank" rel="noreferrer">http://localhost:5001/</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>More information for development can be found <a href="./dev-setup.html">here</a></p></div>`,34);function k(b,v,f,y,_,C){const t=s("Badge");return p(),l("div",null,[a("h1",h,[e("Installation "),i(t,{type:"info",text:"v0.0.0"}),e(),c]),d,a("h2",u,[e("Running the application with Docker "),i(t,{type:"tip",text:"recommended"}),e(),g]),m])}const w=o(r,[["render",k]]);export{P as __pageData,w as default};
